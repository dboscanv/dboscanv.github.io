{"componentChunkName":"component---src-templates-blog-post-js","path":"/usar-punto-y-coma-en-javascript/","result":{"data":{"site":{"siteMetadata":{"title":"Diego Boscan"}},"markdownRemark":{"id":"67f0fef1-2af5-5531-ab1c-40d29a161d8e","excerpt":"Hace unos meses vi por primera vez código JavaScript sin puntos y comas, yo soy una de esas personas que venimos de la “escuela Java”, y estamos acostumbrados a…","html":"<p>Hace unos meses vi por primera vez código JavaScript sin puntos y comas, yo soy una de esas personas que venimos de la “escuela Java”, y estamos acostumbrados a colocar punto y coma (semicolon en inglés) casi que automáticamente al finalizar una expresión.</p>\n<p>Sabía que era permitido, pero que era considerado como una mala practica, al igual que declarar variables sin <code class=\"language-text\">var</code> (ahora debemos usar <code class=\"language-text\">let</code> o <code class=\"language-text\">const</code>). Pero como el mundo de la programación es tan cambiante, se me genero la duda de <strong>si es actualmente necesario usar semicolons en JavaScript</strong>.</p>\n<p>La respuesta corta es <strong>no</strong>, no es necesario. JavaScript interpreta el código y infiere donde termina el bloque para colocar el punto y coma. Además, actualmente no es considerado una mala práctica. Por lo tanto, es cuestión de gustos, sin embargo, hay unas reglas indicadas en la <a href=\"http://www.ecma-international.org/ecma-262/7.0/\">especificación ECMA</a> que debemos saber.</p>\n<h2>¿Cómo funciona el <em>Automatic Semicolon Insertion</em> de JavaScript?</h2>\n<p>El intérprete de JavaScript lee el código de izquierda a derecha e inserta el punto y coma (sino esta presente) cuando se cumplan una de estas reglas:</p>\n<ol>\n<li>Encuentra un potencial error, el punto y coma es insertado antes del carácter si:\n<ul>\n<li>Hay una salto de linea (line break) en ese punto</li>\n<li>El carácter inesperado es <code class=\"language-text\">}</code></li>\n</ul>\n</li>\n<li>Al final del programa</li>\n<li>Encuentra un <code class=\"language-text\">++</code>, <code class=\"language-text\">--</code>,<code class=\"language-text\">return</code>,<code class=\"language-text\">continue</code>,<code class=\"language-text\">return</code> o <code class=\"language-text\">throw</code> y después hay un salto de línea</li>\n</ol>\n<p>Estas reglas se aplican siempre y cuando el programa no sea en una línea, en ese caso usar semicolon es obligatorio, <code class=\"language-text\">let a=1 let b=2</code> no está permitido.</p>\n<h2>En la práctica</h2>\n<p>Para que se entiendan las tres reglas, haré unos ejemplos simples:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></code></pre></div>\n<p>El intérprete empieza a analizar el código desde la línea 1 de izquierda a derecha, cuando pasa a la siguiente línea y analiza el primer carácter (la <code class=\"language-text\">l</code>) encuentra un posible error: no esta permitido declarar una variable con el valor <code class=\"language-text\">10l</code>, en ese momento aplica la regla 1, que dice que si hay un salto de línea en ese punto se coloca un punto y coma. También lo coloca en la declaración de <code class=\"language-text\">obj</code>, ya que el carácter es <code class=\"language-text\">}</code>.</p>\n<p>En el mismo ejemplo se aplica la regla 2, al final del programa, cuando no hay más nada que analizar termina con un punto y coma, de manera que el código es transformado por JavaScript así:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Por último, en el caso de la regla 3 es donde hay ser más cuidadosos cuando programamos sin punto y coma. Consideren el siguiente ejemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n    x\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El ejemplo anterior retornará <code class=\"language-text\">undefined</code> porque al haber una sentencia <code class=\"language-text\">return</code> y un salto de línea, el intérprete coloca el punto y coma, dejandolo así:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//..</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//..</span></code></pre></div>\n<p>Ahora, veamos un ejemplo donde a simple vista pensamos que funciona, pero en realidad el comportamiento no es el esperado:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>JavaScript lanza el siguiente error: <code class=\"language-text\">TypeError: Cannot read property 'forEach' of undefined</code>, esto es porque en la línea 3 al finalizar la declaración el siguiente carácter es <code class=\"language-text\">[</code>, lo cual es totalmente válido, por lo cual no se inserta un punto y coma, produciéndose el error porque <code class=\"language-text\">b[1, 2, 3]</code> es <code class=\"language-text\">undefined</code>.</p>\n<h2>Conclusión</h2>\n<p>Una vez visto como funciona el <em>Automatic Semicolon Insertion</em> de JavaScript, considero que el uso de semicolons debe ser o bien decisión del equipo (por ejemplo, en el core de <a href=\"https://github.com/vuejs/vue/blob/dev/src/core/util/lang.js\">Vue</a> no utilizan) o del programador.</p>\n<p>Personalmente, soy partidario del uso de semicolons, prefiero colocar explícitamente donde termina la expresión y que no lo haga JavaScript por mi.</p>","frontmatter":{"title":"¿Debería usar punto y coma en JavaScript?","date":"agosto 11, 2018","description":"¿Es realmente necesario usar punto y coma en JavaScript? La respuesta corta es no, pero hay unas reglas que tenemos que saber.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8d848","images":{"fallback":{"src":"/static/738155fe5ef8b31a8de213cbd0295fc8/743e0/js-1.png","srcSet":"/static/738155fe5ef8b31a8de213cbd0295fc8/5e1a3/js-1.png 196w,\n/static/738155fe5ef8b31a8de213cbd0295fc8/02c4e/js-1.png 393w,\n/static/738155fe5ef8b31a8de213cbd0295fc8/743e0/js-1.png 785w","sizes":"(min-width: 785px) 785px, 100vw"},"sources":[{"srcSet":"/static/738155fe5ef8b31a8de213cbd0295fc8/83e2f/js-1.avif 196w,\n/static/738155fe5ef8b31a8de213cbd0295fc8/5e74c/js-1.avif 393w,\n/static/738155fe5ef8b31a8de213cbd0295fc8/bd3bc/js-1.avif 785w","type":"image/avif","sizes":"(min-width: 785px) 785px, 100vw"},{"srcSet":"/static/738155fe5ef8b31a8de213cbd0295fc8/018fb/js-1.webp 196w,\n/static/738155fe5ef8b31a8de213cbd0295fc8/51de8/js-1.webp 393w,\n/static/738155fe5ef8b31a8de213cbd0295fc8/6e09c/js-1.webp 785w","type":"image/webp","sizes":"(min-width: 785px) 785px, 100vw"}]},"width":785,"height":340.00000000000006}}}}},"previous":null,"next":{"fields":{"slug":"/razones-para-migrar-a-angular/"},"frontmatter":{"title":"Razones para migrar de AngularJs a Angular"}}},"pageContext":{"id":"67f0fef1-2af5-5531-ab1c-40d29a161d8e","previousPostId":null,"nextPostId":"e30a7f4d-27b1-5a4f-b33c-089e3afebf70"}},"staticQueryHashes":["1324386404","3257411868"]}