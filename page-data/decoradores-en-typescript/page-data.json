{"componentChunkName":"component---src-templates-blog-post-js","path":"/decoradores-en-typescript/","result":{"data":{"site":{"siteMetadata":{"title":"Diego Boscan"}},"markdownRemark":{"id":"7cabf0d8-826c-5b0c-a402-96d6ea660f67","excerpt":"Los decoradores (decorators en inglés) son una propuesta para incluir en JavaScript que nos permite añadir anotaciones y metadatos o cambiar el comportamiento…","html":"<p>Los decoradores (<em>decorators</em> en inglés) son una <a href=\"https://github.com/tc39/proposal-decorators\">propuesta</a> para incluir en JavaScript que nos permite <strong>añadir anotaciones y metadatos</strong> o cambiar el comportamiento de clases, propiedades, métodos, parámetros y accesors. Con TypeScript podemos usarlos activando la propiedad <em>experimentalDecorators</em> del <code class=\"language-text\">tsconfig.json</code> de nuestro proyecto o si decidimos compilar mediante el comando <code class=\"language-text\">tsc</code>, colocar siempre la opción de <code class=\"language-text\">--experimentalDecorators ---target ES5</code>.</p>\n<p>Es muy importante saber que los decoradores al ser todavía una propuesta experimental es posible que tenga cambios en el futuro. No obstante, la presencia de estos en el desarrollo web actual <strong>está siendo notable</strong>, sobre todo en proyectos que utilizan TypeScript (Angular, <a href=\"https://vuejs.org/v2/guide/typescript.html\">Vue</a>, Nest, Stencil, etc). A través de sencillos ejemplos, intentaré explicar de manera simple cómo funcionan y cómo crear sus propios decoradores.</p>\n<h2>¿Cómo funcionan?</h2>\n<p>Un decorador es una función que, dependiendo de que cosa queramos <em>decorar</em>, sus argumentos serán diferentes. Usan la forma <code class=\"language-text\">@expression</code> donde <code class=\"language-text\">expression</code> evaluará la función que será llamada. A continuación, explicaré los decoradores más frecuentes:</p>\n<h3>Decorador de clase</h3>\n<p>Es aplicado al constructor de la clase y puede ser usado para <strong>observar, modificar o reemplazar la definición inicial de la clase</strong>. Su único argumento es <code class=\"language-text\">target</code> que vendría siendo la clase decorada, tipado como <code class=\"language-text\">Function</code> o <code class=\"language-text\">any</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">classDecorator</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span><span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">classDecorator</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My class'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En el ejemplo anterior, simplemente imprimimos por consola la clase que fue decorada. Si queremos hacer algo más avanzado, vamos a necesitar pasar <strong>parámetros a los decoradores</strong>. Para eso podemos escribir un <em>decorator factory</em>, que es simplemente una función que retorna otra función que será llamada en tiempo de ejecución por el decorador. En el código debajo, hacemos algo más interesante: Sobreescribimos una propiedad con el valor que pasamos como parámetro al decorador.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>constructor<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token keyword\">extends</span></span> constructor <span class=\"token punctuation\">{</span>\n\t\t\tname <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">changeName</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> says hi!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Bob says hi!</span></code></pre></div>\n<p>A pesar de inicializar nuestro objecto con el nombre <em>John</em>, el decorador sobrescribe la propiedad. Cabe destacar que los decoradores <strong>son llamados al momento de la declaración de la clase</strong>, no cuando se instancia un objeto.</p>\n<h3>Decorador de métodos</h3>\n<p>Tienen el mismo objetivo que las clases de observar, modificar o reemplazar. La función toma tres parámetros:</p>\n<ol>\n<li><code class=\"language-text\">target</code>: Metodo decorado, generalmente tipado como <code class=\"language-text\">Object</code></li>\n<li><code class=\"language-text\">propertyKey</code>: Nombre del metodo, tipado como <code class=\"language-text\">string | symbol</code></li>\n<li><code class=\"language-text\">descriptor</code>: <em>Property Descriptor</em> del objeto (value, writable, enumerable, configurable, más información <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">acá</a>)</li>\n</ol>\n<p>Podemos crear un decorador para loguear caracteristicas, o también modificar y/o extender el comportamiento, en ese caso <strong>tendremos que modificar la propiedad <code class=\"language-text\">value</code></strong> del <code class=\"language-text\">descriptor</code>, asignandole <strong>una función</strong> (y no una <em>arrow function</em>, ya que perderíamos el contexto de <code class=\"language-text\">this</code>).</p>\n<p>Consideren el siguiente ejemplo, donde el decorador <code class=\"language-text\">log</code> imprime por consola la clase del metodo, el nombre, property descriptor y también los argumentos cuando el metodo es llamado:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span> propertyKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clase: '</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Método: '</span><span class=\"token punctuation\">,</span> propertyKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Property Descriptor: '</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tdescriptor<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Argumentos de la funcion'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> descriptor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleClass</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">log</span></span>\n\t<span class=\"token function\">outputSomething</span><span class=\"token punctuation\">(</span>something<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">ExampleClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">outputSomething</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Parametro de prueba'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Decorador de propiedades y parámetros</h3>\n<p>Son más simples que los anteriores, un decorador de propiedades debe tomar como parámetros <code class=\"language-text\">target</code>, que es el prototipo de la clase, y <code class=\"language-text\">propertyKey</code>, el nombre de la propiedad. Finalmente los decoradores de parámetros, funcionan igual pero con el parámetro adicional <code class=\"language-text\">parameterIndex</code>, que indica la posición en el array, por ejemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">decoratedProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span> propertyKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clase'</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nombre de la propiedad'</span><span class=\"token punctuation\">,</span> propertyKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">decoratedParam</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span> propertyKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> parameterIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nombre del metodo'</span><span class=\"token punctuation\">,</span> propertyKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clase'</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Posicion del parámetro'</span><span class=\"token punctuation\">,</span> parameterIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">decoratedProperty</span></span> exampleProperty<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">decoratedParam</span></span> b<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Conclusión</h2>\n<p>Gracias a herramientas como TypeScript podemos hacer uso de features que serán incluidas en el estándar en un futuro. Los decoradores, son simplemente funciones que nos permiten darle un significado especial a clases, métodos, etc añadiendo metadatos y anotaciones u observando o cambiando comportamientos. Son en realidad muy fáciles de entender y nos ayudan a comprender un poco más la <em>magia</em> que hacen los frameworks y librerías por detrás.</p>\n<p>Puedes encontrar todo código visto en el artículo en <a href=\"https://github.com/dboscanv/decorators-example\">mi repositorio en GitHub</a>.</p>","frontmatter":{"title":"Decoradores en TypeScript","date":"noviembre 14, 2018","description":"Los decoradores nos permiten agregar anotaciones y metadatos, además de poder observar, modificar o reemplazar el comportamiento de clases, metodos, propiedades y parámetros.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#185888","images":{"fallback":{"src":"/static/04c63d9f5200f3716d1a9799c1e5c712/288ca/decorators.png","srcSet":"/static/04c63d9f5200f3716d1a9799c1e5c712/45ff4/decorators.png 256w,\n/static/04c63d9f5200f3716d1a9799c1e5c712/79c04/decorators.png 512w,\n/static/04c63d9f5200f3716d1a9799c1e5c712/288ca/decorators.png 1024w","sizes":"(min-width: 1024px) 1024px, 100vw"},"sources":[{"srcSet":"/static/04c63d9f5200f3716d1a9799c1e5c712/1faa3/decorators.avif 256w,\n/static/04c63d9f5200f3716d1a9799c1e5c712/dc0ad/decorators.avif 512w,\n/static/04c63d9f5200f3716d1a9799c1e5c712/1ebd6/decorators.avif 1024w","type":"image/avif","sizes":"(min-width: 1024px) 1024px, 100vw"},{"srcSet":"/static/04c63d9f5200f3716d1a9799c1e5c712/8d60e/decorators.webp 256w,\n/static/04c63d9f5200f3716d1a9799c1e5c712/ee5dd/decorators.webp 512w,\n/static/04c63d9f5200f3716d1a9799c1e5c712/59a47/decorators.webp 1024w","type":"image/webp","sizes":"(min-width: 1024px) 1024px, 100vw"}]},"width":1024,"height":512}}}}},"previous":{"fields":{"slug":"/razones-para-migrar-a-angular/"},"frontmatter":{"title":"Razones para migrar de AngularJs a Angular"}},"next":{"fields":{"slug":"/importancia-probar-nuestro-codigo/"},"frontmatter":{"title":"¿Por qué es importante probar nuestro código?"}}},"pageContext":{"id":"7cabf0d8-826c-5b0c-a402-96d6ea660f67","previousPostId":"e30a7f4d-27b1-5a4f-b33c-089e3afebf70","nextPostId":"b80988f0-9548-5dcb-a2ee-7e28bcfeb86c"}},"staticQueryHashes":["1324386404","3257411868"]}