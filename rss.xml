<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Diego Boscan]]></title><description><![CDATA[Software Engineer. Desarrollador web con experiencia en todo el ecosistema JavaScript. En mis tiempos libres, leo y veo fútbol]]></description><link>https://diegoboscan.com</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 09 Aug 2021 03:08:49 GMT</lastBuildDate><item><title><![CDATA[¿Por qué es importante probar nuestro código?]]></title><description><![CDATA[Julieta, Santiago y Juan desarrollan una aplicación web administrativa para una importante empresa de su ciudad. Han estado trabajando…]]></description><link>https://diegoboscan.com/importancia-probar-nuestro-codigo/</link><guid isPermaLink="false">https://diegoboscan.com/importancia-probar-nuestro-codigo/</guid><pubDate>Mon, 09 Aug 2021 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;Julieta, Santiago y Juan desarrollan una aplicación web administrativa para una importante empresa de su ciudad. Han estado trabajando durante un mes en la mínima versión viable. Es lunes y el deadline es el próximo jueves, donde tienen que tener todo cerrado para iniciar el día siguiente las primeras pruebas con el cliente.&lt;/p&gt;
&lt;p&gt;Los desarrolladores se dividieron los diferentes módulos del sistema y todo iba bien, cumpliendo con la velocidad esperada. Los problemas empezaron el martes, cuando empezaron las integraciones y las pruebas: Julieta y Santiago, probando, se dieron cuenta que el módulo de clientes no se comunicaba bien con el módulo de obras. Al mismo tiempo, Juan encontró un par de bugs que arrancó a resolver.&lt;/p&gt;
&lt;h2&gt;El típico problema&lt;/h2&gt;
&lt;p&gt;Cuando Julieta y Santiago arreglaron el problema de integración, se encontraron con que una funcionalidad presente en todas las partes del sistema, que ya habían probado, dejó de funcionar: el cambio que metió Juan para arreglar los bugs que encontró, tocó una función reutilizable y rompió ese caso de uso.&lt;/p&gt;
&lt;p&gt;Cada vez que arreglaban una parte del sistema, se rompía otra parte. Cada vez que metían un cambio, tenían que probar manualmente todas las partes para asegurarse que no estaba nada roto. Así pasaron los días, llegó el jueves y el equipo a pesar de trabajar horas extras, no pudo cumplir con la fecha comprometida.&lt;/p&gt;
&lt;p&gt;¿Te suena esta historia? Pasa todo el tiempo en muchos equipos de desarrollo de software. Todos hemos sido protagonistas de esta historia, en mayor o menor medida.
Mi objetivo con este post es que sepas que existe una forma de evitar (o al menos, mitigar) esta perdida de tiempo y recursos: creando pruebas automatizadas &lt;em&gt;(en inglés, automated tests)&lt;/em&gt; o simplemente, &lt;em&gt;tests&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;¿Qué son las pruebas automatizadas?&lt;/h2&gt;
&lt;p&gt;En pocas palabras, es código que prueba tu código productivo con la finalidad de encontrar &lt;em&gt;bugs&lt;/em&gt;. Existen varios tipos de tests, y para profundizar en todos tendría que escribir otro post, pero en resumen, los tests que normalmente son responsabilidad de los desarrolladores son: &lt;strong&gt;test unitarios, test de integración y test end-to-end.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Una vez que comprendes las ventajas de crear tests, notas la importancia y el gran valor que aportan. Principalmente, &lt;strong&gt;agregando tests los desarrolladores pierden el miedo al cambio&lt;/strong&gt;. En proyectos medianos/grandes, debe ser casi obligatorio crear y mantener suites de tests, tanto por la salud mental de las personas que participan, como por la salud misma del proyecto.&lt;/p&gt;
&lt;h2&gt;Ventajas de crear tests&lt;/h2&gt;
&lt;h3&gt;Son automáticos&lt;/h3&gt;
&lt;p&gt;Como su nombre lo indica, los tests son automáticos. Listo algunas de las ventajas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un test automatizado &lt;strong&gt;tiene menos probabilidades de ser mal ejecutado que un test manual&lt;/strong&gt;. De forma manual, es más probable que la persona que esté probando se olvide de un detalle. Cuando está automatizado, queda plasmado en el código y puede ser ejecutado infinitas veces.&lt;/li&gt;
&lt;li&gt;Esencial para hacer &lt;strong&gt;test de regresión de una manera práctica y eficiente.&lt;/strong&gt; Sin la automatización, los desarrolladores tendrían que manualmente ejecutar los casos de prueba cada vez que se introduzcan cambios en el sistema. En un software pequeño no supone mucho problema, pero a medida que incrementa la complejidad y el tamaño del software, el tiempo de testing manual es mayor.&lt;/li&gt;
&lt;li&gt;Pueden ejecutarse frecuentemente con el fin de &lt;strong&gt;detectar lo más pronto posible bugs en el código ante los inminentes cambios&lt;/strong&gt;.  Por lo tanto, pueden ser usados como mecanismo de feedback instantáneo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Te dan confianza&lt;/h3&gt;
&lt;p&gt;Creando tests &lt;strong&gt;compruebas que el código que estás metiendo cumpla con los requerimientos y esté libre de bugs&lt;/strong&gt;. También te ayuda a asegurarte que esos cambios no están rompiendo en otra parte del sistema. Todo esto, antes de que llegue al usuario final.&lt;/p&gt;
&lt;p&gt;Gracias a la confianza que nos dan, el desarrollador pierde el miedo al cambio, puede entregar funcionalidades en menor tiempo, y puede dormir tranquilo sabiendo que su código esta cumpliendo con los casos de uso.&lt;/p&gt;
&lt;h3&gt;Permiten que el código sea flexible, mantenible y reutilizable&lt;/h3&gt;
&lt;p&gt;Los tests permiten que tu código sea &lt;strong&gt;flexible&lt;/strong&gt;: puedes agregar más casos de uso, sin miedo a romper los casos actuales.&lt;/p&gt;
&lt;p&gt;Hace tu código &lt;strong&gt;mantenible&lt;/strong&gt;: puedes agregar funcionalidades, cambiar las ya existentes, mejorar funcionamientos, hacer refactors y corregir bugs sin el miedo a romper la aplicación, sin el miedo a pasar horas arreglando un bug que generaste. Sin el miedo a hacer más daño que bien.&lt;/p&gt;
&lt;p&gt;Por último, lo hace más &lt;strong&gt;reutilizable&lt;/strong&gt;, ya que un código que quieras reutilizar en otra parte del sistema, con los tests tienes la certeza de que sigue funcionando para lo que originalmente fue diseñado y además te aseguras que el nuevo cambio cumpla con el caso de uso nuevo y este libre de bugs.&lt;/p&gt;
&lt;h3&gt;Proveen documentación&lt;/h3&gt;
&lt;p&gt;Aunque no es documentación &lt;em&gt;per se&lt;/em&gt;, los tests son una especie de documentación: Plasman los casos que debe cumplir el software y cómo se supone que debe usarse.&lt;/p&gt;
&lt;h3&gt;Son rentables&lt;/h3&gt;
&lt;p&gt;Al estar automatizados, permiten que las pruebas sean ejecutadas con frecuencia, las veces que queramos. Esto minimiza el tiempo de testing manual, y permite que los desarrolladores en lugar de invertir grandes cantidades de tiempo probando, &lt;strong&gt;inviertan su valioso tiempo en agregar nuevas funcionalidades o mejorar las ya existentes.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Cómo podemos observar, los tests son una importante herramienta para el aseguramiento y mejora de la calidad del software.&lt;/p&gt;
&lt;p&gt;El software esta presente en todas las áreas de nuestra vida. Un bug puede costar desde la perdida de la confianza de los usuarios, hasta perdida de información o incluso perdidas millonarias. Es nuestra responsabilidad como desarrolladores entregar software con calidad, libre de bugs y que tenga un comportamiento esperado.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Decoradores en TypeScript]]></title><description><![CDATA[Los decoradores (decorators en inglés) son una propuesta para incluir en JavaScript que nos permite añadir anotaciones y metadatos o cambiar…]]></description><link>https://diegoboscan.com/decoradores-en-typescript/</link><guid isPermaLink="false">https://diegoboscan.com/decoradores-en-typescript/</guid><pubDate>Wed, 14 Nov 2018 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;Los decoradores (&lt;em&gt;decorators&lt;/em&gt; en inglés) son una &lt;a href=&quot;https://github.com/tc39/proposal-decorators&quot;&gt;propuesta&lt;/a&gt; para incluir en JavaScript que nos permite &lt;strong&gt;añadir anotaciones y metadatos&lt;/strong&gt; o cambiar el comportamiento de clases, propiedades, métodos, parámetros y accesors. Con TypeScript podemos usarlos activando la propiedad &lt;em&gt;experimentalDecorators&lt;/em&gt; del &lt;code class=&quot;language-text&quot;&gt;tsconfig.json&lt;/code&gt; de nuestro proyecto o si decidimos compilar mediante el comando &lt;code class=&quot;language-text&quot;&gt;tsc&lt;/code&gt;, colocar siempre la opción de &lt;code class=&quot;language-text&quot;&gt;--experimentalDecorators ---target ES5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Es muy importante saber que los decoradores al ser todavía una propuesta experimental es posible que tenga cambios en el futuro. No obstante, la presencia de estos en el desarrollo web actual &lt;strong&gt;está siendo notable&lt;/strong&gt;, sobre todo en proyectos que utilizan TypeScript (Angular, &lt;a href=&quot;https://vuejs.org/v2/guide/typescript.html&quot;&gt;Vue&lt;/a&gt;, Nest, Stencil, etc). A través de sencillos ejemplos, intentaré explicar de manera simple cómo funcionan y cómo crear sus propios decoradores.&lt;/p&gt;
&lt;h2&gt;¿Cómo funcionan?&lt;/h2&gt;
&lt;p&gt;Un decorador es una función que, dependiendo de que cosa queramos &lt;em&gt;decorar&lt;/em&gt;, sus argumentos serán diferentes. Usan la forma &lt;code class=&quot;language-text&quot;&gt;@expression&lt;/code&gt; donde &lt;code class=&quot;language-text&quot;&gt;expression&lt;/code&gt; evaluará la función que será llamada. A continuación, explicaré los decoradores más frecuentes:&lt;/p&gt;
&lt;h3&gt;Decorador de clase&lt;/h3&gt;
&lt;p&gt;Es aplicado al constructor de la clase y puede ser usado para &lt;strong&gt;observar, modificar o reemplazar la definición inicial de la clase&lt;/strong&gt;. Su único argumento es &lt;code class=&quot;language-text&quot;&gt;target&lt;/code&gt; que vendría siendo la clase decorada, tipado como &lt;code class=&quot;language-text&quot;&gt;Function&lt;/code&gt; o &lt;code class=&quot;language-text&quot;&gt;any&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;classDecorator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;classDecorator&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;My class&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En el ejemplo anterior, simplemente imprimimos por consola la clase que fue decorada. Si queremos hacer algo más avanzado, vamos a necesitar pasar &lt;strong&gt;parámetros a los decoradores&lt;/strong&gt;. Para eso podemos escribir un &lt;em&gt;decorator factory&lt;/em&gt;, que es simplemente una función que retorna otra función que será llamada en tiempo de ejecución por el decorador. En el código debajo, hacemos algo más interesante: Sobreescribimos una propiedad con el valor que pasamos como parámetro al decorador.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;changeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;constructor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; constructor &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;changeName&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Bob&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token function&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; says hi!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Bob says hi!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A pesar de inicializar nuestro objecto con el nombre &lt;em&gt;John&lt;/em&gt;, el decorador sobrescribe la propiedad. Cabe destacar que los decoradores &lt;strong&gt;son llamados al momento de la declaración de la clase&lt;/strong&gt;, no cuando se instancia un objeto.&lt;/p&gt;
&lt;h3&gt;Decorador de métodos&lt;/h3&gt;
&lt;p&gt;Tienen el mismo objetivo que las clases de observar, modificar o reemplazar. La función toma tres parámetros:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;target&lt;/code&gt;: Metodo decorado, generalmente tipado como &lt;code class=&quot;language-text&quot;&gt;Object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;propertyKey&lt;/code&gt;: Nombre del metodo, tipado como &lt;code class=&quot;language-text&quot;&gt;string | symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;descriptor&lt;/code&gt;: &lt;em&gt;Property Descriptor&lt;/em&gt; del objeto (value, writable, enumerable, configurable, más información &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt;acá&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Podemos crear un decorador para loguear caracteristicas, o también modificar y/o extender el comportamiento, en ese caso &lt;strong&gt;tendremos que modificar la propiedad &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;&lt;/strong&gt; del &lt;code class=&quot;language-text&quot;&gt;descriptor&lt;/code&gt;, asignandole &lt;strong&gt;una función&lt;/strong&gt; (y no una &lt;em&gt;arrow function&lt;/em&gt;, ya que perderíamos el contexto de &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Consideren el siguiente ejemplo, donde el decorador &lt;code class=&quot;language-text&quot;&gt;log&lt;/code&gt; imprime por consola la clase del metodo, el nombre, property descriptor y también los argumentos cuando el metodo es llamado:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; propertyKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; descriptor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Clase: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constructor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Método: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; propertyKey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Property Descriptor: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; descriptor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	descriptor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Argumentos de la funcion&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; descriptor&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExampleClass&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;outputSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;something&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;something&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExampleClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;outputSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Parametro de prueba&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Decorador de propiedades y parámetros&lt;/h3&gt;
&lt;p&gt;Son más simples que los anteriores, un decorador de propiedades debe tomar como parámetros &lt;code class=&quot;language-text&quot;&gt;target&lt;/code&gt;, que es el prototipo de la clase, y &lt;code class=&quot;language-text&quot;&gt;propertyKey&lt;/code&gt;, el nombre de la propiedad. Finalmente los decoradores de parámetros, funcionan igual pero con el parámetro adicional &lt;code class=&quot;language-text&quot;&gt;parameterIndex&lt;/code&gt;, que indica la posición en el array, por ejemplo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decoratedProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; propertyKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Clase&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Nombre de la propiedad&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; propertyKey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decoratedParam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; propertyKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; parameterIndex&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Nombre del metodo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; propertyKey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Clase&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Posicion del parámetro&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; parameterIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExampleClass&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;decoratedProperty&lt;/span&gt;&lt;/span&gt; exampleProperty&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello World&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;decoratedParam&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;b
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Gracias a herramientas como TypeScript podemos hacer uso de features que serán incluidas en el estándar en un futuro. Los decoradores, son simplemente funciones que nos permiten darle un significado especial a clases, métodos, etc añadiendo metadatos y anotaciones u observando o cambiando comportamientos. Son en realidad muy fáciles de entender y nos ayudan a comprender un poco más la &lt;em&gt;magia&lt;/em&gt; que hacen los frameworks y librerías por detrás.&lt;/p&gt;
&lt;p&gt;Puedes encontrar todo código visto en el artículo en &lt;a href=&quot;https://github.com/dboscanv/decorators-example&quot;&gt;mi repositorio en GitHub&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Razones para migrar de AngularJs a Angular]]></title><description><![CDATA[La evolución del frontend es impresionante. La web (y JavaScript) cada vez son más potentes. Atrás quedaron los tiempos de jQuery donde el…]]></description><link>https://diegoboscan.com/razones-para-migrar-a-angular/</link><guid isPermaLink="false">https://diegoboscan.com/razones-para-migrar-a-angular/</guid><pubDate>Mon, 17 Sep 2018 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;La evolución del frontend es impresionante. La web (y JavaScript) cada vez son más potentes. Atrás quedaron los tiempos de jQuery donde el frontend solo consistía en hacer animaciones, AJAX y poco más. A partir de la llegada de frameworks como AngularJs, el frontend cambio para siempre.&lt;/p&gt;
&lt;p&gt;Hasta hace unos años AngularJs era un framework muy utilizado, por eso hay muchas aplicaciones (y desarrolladores) que en la actualidad lo siguen usando. Para muestra, en la última encuesta del año 2017 de la web &lt;a href=&quot;https://2017.stateofjs.com/2017/front-end/results&quot;&gt;State of Js&lt;/a&gt;, arroja que de los encuestados &lt;strong&gt;14.300 usaron AngularJs alguna vez&lt;/strong&gt; y de ese grupo, unos &lt;strong&gt;4.707 desarrolladores lo usarían nuevamente&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pero es conocido que AngularJS tiene problemas, tanto de rendimiento como de estructura, solamente basta con preguntarse &lt;strong&gt;¿por qué Google decidió reescribirlo desde cero?&lt;/strong&gt; Recientemente, anunciaron que la versión 1.7 será la última y &lt;strong&gt;tendrá soporte hasta Junio de 2020&lt;/strong&gt;. Es decir, que luego de esa fecha, haciendo una analogia es como usar Windows XP de sistema operativo.&lt;/p&gt;
&lt;p&gt;Si tienes aplicaciones en AngularJs y estás dudoso de actualizar a la versión más actualizada de Angular, acá explico porque en mi opinión debes actualizar lo más pronto posible (ya que tarde o temprano tendrás que reescribir el código).&lt;/p&gt;
&lt;h2&gt;Código mantenible y reutilizable&lt;/h2&gt;
&lt;p&gt;En AngularJs, el código se separaba en controladores, directivas, servicios, vistas. No se desarrollaba orientado a componentes, de manera que era muy frecuente repetir código en varios controladores, usar (y saturar) &lt;code class=&quot;language-text&quot;&gt;$rootScope&lt;/code&gt;, usar two-way data binding en casi todo, etc. Todo esto trae problemas de rendimiento y hacen el mantenimiento cada vez más costoso.&lt;/p&gt;
&lt;p&gt;Con la llegada de los componentes en Angular, ahora se incita a la reusabilidad, se usa menos two-way data binding en favor de los eventos para evitar bugs, entre otros. Además, &lt;strong&gt;Angular utiliza TypeScript&lt;/strong&gt;, que entre muchas ventajas, nos ofrece tipado estático, y si tu aplicación es grande, eso es un plus importante.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://rubygarage.s3.amazonaws.com/uploads/article_image/file/571/2-way-and-1-way-data-binding.jpg&quot; alt=&quot;Explicación gráfica de 1-way data binding vs 2-way data binding&quot;&gt;&lt;/p&gt;
&lt;h2&gt;TypeScript&lt;/h2&gt;
&lt;p&gt;La decisión de usar TypeScript para mi fue un acierto. Programar con &lt;strong&gt;tipado estático&lt;/strong&gt; es genial, es verdad que en proyectos pequeños o medianos no es tan necesario (es cuestión de preferencia) pero cuando hablamos de un proyecto grande las ventajas son notorias. Programar con TypeScript es resumidamente usar JavaScript más los beneficios de tener tipado estático, interfaces, enums, type assertions, etc.&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos una aplicación de un e-commerce (o de ventas simplemente), con TypeScript podemos crear algo así:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    balance&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    price&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En el código de arriba, creamos dos interfaces que podemos usar para definir la forma que deben tener los objetos en ciertas situaciones, con esto, TypeScript nos avisa en una etapa temprana de desarrollo si estamos accidentalmente cambiando el nombre de un producto o intentando usar un objeto de tipo &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt; que no tiene la propiedad &lt;code class=&quot;language-text&quot;&gt;balance&lt;/code&gt;. Lo podemos ver en el siguiente código:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buyProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; User&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; product&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Product&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;balance &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; product&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;price&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; product &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; price&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;buyProduct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; product&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ERROR: Property &apos;balance&apos; is missing in type &apos;{ id: number; name: string; }&apos;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TypeScript nos indicará que estamos intentando pasarle a esa función un objeto que no tiene las propidades obligatorias, de manera que &lt;strong&gt;capturamos un error antes de que ocurra&lt;/strong&gt;. Sino hubiésemos usado una &lt;em&gt;interface&lt;/em&gt;, el código fallaría más adelante, y si hacemos muchas operaciones en conjunto, se hará más dificil encontrar el bug. De la misma manera si intentamos accidentalmente cambiar el nombre de un producto una vez creado, el &lt;em&gt;type-checker&lt;/em&gt; de TypeScript se encargará de avisarte para que eso no ocurra.&lt;/p&gt;
&lt;p&gt;Además, es menos &lt;em&gt;costoso&lt;/em&gt; el ingreso de programadores a los proyectos, &lt;strong&gt;ya que el tipado estático te guía en el desarrollo&lt;/strong&gt; y gracias a los tipos puedes mirar el código y entender más fácilmente.&lt;/p&gt;
&lt;h2&gt;Mejor ecosistema&lt;/h2&gt;
&lt;p&gt;Muchas librerías en AngularJs logicámente ya no se mantienen, las personas prefieren dar soporte a una versión más actual donde obtengan mejor rendimiento. Los requerimientos también cambian con el tiempo, ahora cada vez se le exige más al frontend, por eso es mucho más probable que &lt;strong&gt;alguien haya tenido un problema actual y desarrolle una libreria para ello usando Angular a que lo haga en AngularJs&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Mayores facilidades para el desarrollo&lt;/h2&gt;
&lt;p&gt;A parte de darnos una buena estructura para crear aplicaciones escalables y mantenibles, Angular y la mayoría de los frameworks actuales &lt;strong&gt;tienen herramientas que nos facilitan el desarrollo&lt;/strong&gt;, como por ejemplo &lt;em&gt;angular-cli&lt;/em&gt; (consola de comandos para generar archivos, ejecutar tests, levantar un servidor de desarrollo, etc) o &lt;em&gt;Angular Augury&lt;/em&gt; (extensión para Firefox y Google Chrome que nos permite debuggear más fácilmente).&lt;/p&gt;
&lt;p&gt;Además de eso, herramientas como Visual Studio Code o WebStorm soportan Angular (y los frameworks modernos) por defecto.&lt;/p&gt;
&lt;h2&gt;Búsqueda de programadores&lt;/h2&gt;
&lt;p&gt;Por un lado tenemos que la mayoría de las personas que saben AngularJs prefieren trabajar en otras tecnologías que ofrezcan mejores beneficios, y por otro lado tenemos que los programadores nuevos no van a aprender AngularJs y &lt;strong&gt;será cada vez más difícil conseguir gente capacitada&lt;/strong&gt;. Si ya es complicado encontrar programadores, que sepan y trabajen con AngularJs será una tarea aún más difícil.&lt;/p&gt;
&lt;h2&gt;Se puede migrar progresivamente&lt;/h2&gt;
&lt;p&gt;Existen varias maneras de migrar aplicaciones AngularJs a la ultima versión estable. &lt;strong&gt;Es posible hacerlo progresivamente&lt;/strong&gt; usando herramientas como ngUpgrade, Angular Elements o incluso desarrollando tus propios web components. Por lo tanto, puedes ir migrando a tu tiempo sin necesidad de parar el desarrollo.&lt;/p&gt;
&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Definitivamente &lt;strong&gt;es una mala idea seguir desarrollando y manteniendo una aplicación AngularJs&lt;/strong&gt; en la actualidad. El costo de una migración depende de muchos factores, pero en la gran mayoría de los casos no será fácil, sin embargo, si tienes una aplicacion que estará en producción por varios años más, poniendo todo en una balanza creo que son más los beneficios que el tiempo que se invertira en el proceso.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[¿Debería usar punto y coma en JavaScript?]]></title><description><![CDATA[Hace unos meses vi por primera vez código JavaScript sin puntos y comas, yo soy una de esas personas que venimos de la “escuela Java”, y…]]></description><link>https://diegoboscan.com/usar-punto-y-coma-en-javascript/</link><guid isPermaLink="false">https://diegoboscan.com/usar-punto-y-coma-en-javascript/</guid><pubDate>Sat, 11 Aug 2018 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;Hace unos meses vi por primera vez código JavaScript sin puntos y comas, yo soy una de esas personas que venimos de la “escuela Java”, y estamos acostumbrados a colocar punto y coma (semicolon en inglés) casi que automáticamente al finalizar una expresión.&lt;/p&gt;
&lt;p&gt;Sabía que era permitido, pero que era considerado como una mala practica, al igual que declarar variables sin &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; (ahora debemos usar &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; o &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;). Pero como el mundo de la programación es tan cambiante, se me genero la duda de &lt;strong&gt;si es actualmente necesario usar semicolons en JavaScript&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La respuesta corta es &lt;strong&gt;no&lt;/strong&gt;, no es necesario. JavaScript interpreta el código y infiere donde termina el bloque para colocar el punto y coma. Además, actualmente no es considerado una mala práctica. Por lo tanto, es cuestión de gustos, sin embargo, hay unas reglas indicadas en la &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/&quot;&gt;especificación ECMA&lt;/a&gt; que debemos saber.&lt;/p&gt;
&lt;h2&gt;¿Cómo funciona el &lt;em&gt;Automatic Semicolon Insertion&lt;/em&gt; de JavaScript?&lt;/h2&gt;
&lt;p&gt;El intérprete de JavaScript lee el código de izquierda a derecha e inserta el punto y coma (sino esta presente) cuando se cumplan una de estas reglas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encuentra un potencial error, el punto y coma es insertado antes del carácter si:
&lt;ul&gt;
&lt;li&gt;Hay una salto de linea (line break) en ese punto&lt;/li&gt;
&lt;li&gt;El carácter inesperado es &lt;code class=&quot;language-text&quot;&gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Al final del programa&lt;/li&gt;
&lt;li&gt;Encuentra un &lt;code class=&quot;language-text&quot;&gt;++&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;--&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;return&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;continue&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;return&lt;/code&gt; o &lt;code class=&quot;language-text&quot;&gt;throw&lt;/code&gt; y después hay un salto de línea&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Estas reglas se aplican siempre y cuando el programa no sea en una línea, en ese caso usar semicolon es obligatorio, &lt;code class=&quot;language-text&quot;&gt;let a=1 let b=2&lt;/code&gt; no está permitido.&lt;/p&gt;
&lt;h2&gt;En la práctica&lt;/h2&gt;
&lt;p&gt;Para que se entiendan las tres reglas, haré unos ejemplos simples:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;El intérprete empieza a analizar el código desde la línea 1 de izquierda a derecha, cuando pasa a la siguiente línea y analiza el primer carácter (la &lt;code class=&quot;language-text&quot;&gt;l&lt;/code&gt;) encuentra un posible error: no esta permitido declarar una variable con el valor &lt;code class=&quot;language-text&quot;&gt;10l&lt;/code&gt;, en ese momento aplica la regla 1, que dice que si hay un salto de línea en ese punto se coloca un punto y coma. También lo coloca en la declaración de &lt;code class=&quot;language-text&quot;&gt;obj&lt;/code&gt;, ya que el carácter es &lt;code class=&quot;language-text&quot;&gt;}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En el mismo ejemplo se aplica la regla 2, al final del programa, cuando no hay más nada que analizar termina con un punto y coma, de manera que el código es transformado por JavaScript así:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Por último, en el caso de la regla 3 es donde hay ser más cuidadosos cuando programamos sin punto y coma. Consideren el siguiente ejemplo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
    x
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;El ejemplo anterior retornará &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt; porque al haber una sentencia &lt;code class=&quot;language-text&quot;&gt;return&lt;/code&gt; y un salto de línea, el intérprete coloca el punto y coma, dejandolo así:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//..&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//..&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ahora, veamos un ejemplo donde a simple vista pensamos que funciona, pero en realidad el comportamiento no es el esperado:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JavaScript lanza el siguiente error: &lt;code class=&quot;language-text&quot;&gt;TypeError: Cannot read property &apos;forEach&apos; of undefined&lt;/code&gt;, esto es porque en la línea 3 al finalizar la declaración el siguiente carácter es &lt;code class=&quot;language-text&quot;&gt;[&lt;/code&gt;, lo cual es totalmente válido, por lo cual no se inserta un punto y coma, produciéndose el error porque &lt;code class=&quot;language-text&quot;&gt;b[1, 2, 3]&lt;/code&gt; es &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Una vez visto como funciona el &lt;em&gt;Automatic Semicolon Insertion&lt;/em&gt; de JavaScript, considero que el uso de semicolons debe ser o bien decisión del equipo (por ejemplo, en el core de &lt;a href=&quot;https://github.com/vuejs/vue/blob/dev/src/core/util/lang.js&quot;&gt;Vue&lt;/a&gt; no utilizan) o del programador.&lt;/p&gt;
&lt;p&gt;Personalmente, soy partidario del uso de semicolons, prefiero colocar explícitamente donde termina la expresión y que no lo haga JavaScript por mi.&lt;/p&gt;</content:encoded></item></channel></rss>